name: Run DB Migrations

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "**/migrations/**"

concurrency:
  group: migrate-db-${{ github.ref }}
  cancel-in-progress: true

jobs:
  migrate:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: .uv_cache
          key: uv-cache-${{ hashFiles('**/uv.lock') }}
          restore-keys: uv-cache-
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Set short SHA
        id: tag
        run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
      - name: Build and push Celery Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/migrate/Dockerfile
          push: true
          tags: |
            ${{ vars.ECR_REPOSITORY_URI }}:migrate-${{ steps.tag.outputs.short_sha }}
            ${{ vars.ECR_REPOSITORY_URI }}:migrate-latest
          cache-from: type=gha
          cache-to: "type=gha,mode=max"
          build-args: |
            UV_CACHE_DIR=${{ github.workspace }}/.uv_cache
      - name: Migrate DB
        id: wait_migrate
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster cloneugc-celery-cluster \
            --launch-type FARGATE \
            --task-definition cloneugc-migrate-task:2 \
            --network-configuration file://deploy/migrate-task-nc.json \
            --query "tasks[0].taskArn" --output text)
          
          echo "Task ARN: $TASK_ARN"
          
          # Wait for task to stop (max 300s)
          aws ecs wait tasks-stopped \
            --cluster cloneugc-celery-cluster \
            --tasks $TASK_ARN \
            --max-attempts 40
          
          # Check exit code
          EXIT_CODE=$(aws ecs describe-tasks --cluster cloneugc-celery-cluster --tasks $TASK_ARN --query "tasks[0].containers[0].exitCode" --output text)
          echo "Migrate container exit code: $EXIT_CODE"
          
          if [ "$EXIT_CODE" != "0" ]; then
            echo "Migration failed"
            exit 1
          fi
